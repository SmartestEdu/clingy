{"version":3,"sources":["clingy.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","Clingy","$rootScope","$window","clingyProvider","this","clingies","eventIsBoundForState","eventIsBoundForWindow","unregisterRootScopeListener","angular","noop","value","listenForWindowUnload","onbeforeunload","pleaseDontLeaveMe","bind","listenForStateChange","$on","message","clingy","clingyId","generateUniqueId","id","breakup","filter","isClingy","removeEventListeners","push","addEventListeners","Date","getTime","Math","round","random","join","event","iCantQuitYou","messages","forEach","indexOf","map","name","confirm","preventDefault","undefined","ClingyProvider","$get","module","provider"],"mappings":"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","file":"clingy.js","sourcesContent":["class Clingy {\n    constructor(\n        $rootScope,\n        $window,\n        clingyProvider\n    ) {\n        this.$rootScope = $rootScope;\n        this.$window = $window;\n        this.clingies = [];\n        this.clingyProvider = clingyProvider;\n        this.eventIsBoundForState = false;\n        this.eventIsBoundForWindow = false;\n        this.unregisterRootScopeListener = angular.noop;\n    }\n\n    addEventListeners() {\n        if (\n            false === this.eventIsBoundForWindow &&\n            true === this.clingyProvider.listenForWindowUnload\n        ) {\n            this.$window.onbeforeunload = this\n                .pleaseDontLeaveMe\n                .bind(this)\n            ;\n            this.eventIsBoundForWindow = true;\n        }\n\n        if (\n            false === this.eventIsBoundForState &&\n            true === this.clingyProvider.listenForStateChange\n        ) {\n            this.unregisterRootScopeListener = this\n                .$rootScope\n                .$on(\n                    '$stateChangeStart',\n                    this.pleaseDontLeaveMe.bind(this)\n                )\n            ;\n            this.eventIsBoundForState = true;\n        }\n    }\n\n    cling(message) {\n        var clingy;\n        var clingyId = this.generateUniqueId();\n\n        if ('string' !== typeof message) {\n            throw new TypeError(\n                'Invalid message provided. You can\\'t tell me to cling to ' +\n                'something without telling me what to say!'\n            );\n        }\n\n        clingy = {\n            id: clingyId,\n            breakup: function() {\n                this.clingies = this.clingies.filter(\n                    (clingy) => clingy.id !== clingyId\n                );\n\n                if (false === this.isClingy()) {\n                    this.removeEventListeners();\n                }\n            }.bind(this),\n            message: message,\n        };\n\n        this.clingies.push(clingy);\n\n        this.addEventListeners();\n\n        return clingy.breakup;\n    }\n\n    generateUniqueId() {\n        return [\n            new Date().getTime(),\n            Math.round(\n                Math.random() * 1e6\n            ),\n        ].join('.');\n    }\n\n    isClingy() {\n        return 0 !== this.clingies.length;\n    }\n\n    pleaseDontLeaveMe(event) {\n        var iCantQuitYou;\n        var messages = [];\n\n        if (false === this.isClingy()) {\n            return;\n        }\n\n        this\n            .clingies\n            .forEach((clingy) => {\n                if (-1 === messages.indexOf(clingy.message)) {\n                    messages.push(clingy.message);\n                }\n            })\n        ;\n\n        if (1 === messages.length) {\n            messages = messages\n                .join('')\n            ;\n        } else {\n            messages = messages\n                .map((message) => 'â€¢ ' + message)\n                .join('\\n')\n            ;\n        }\n\n        if ('$stateChangeStart' === event.name) {\n            iCantQuitYou = !confirm(messages);\n\n            if (true == iCantQuitYou) {\n                event.preventDefault();\n            }\n\n            return iCantQuitYou;\n        }\n\n        return messages;\n    }\n\n    removeEventListeners() {\n        this.$window.onbeforeunload = undefined;\n        this.unregisterRootScopeListener();\n        this.eventIsBoundForState = false;\n        this.eventIsBoundForWindow = false;\n    }\n}\n\nclass ClingyProvider {\n    constructor() {\n        this.$get = [\n            '$rootScope',\n            '$window',\n            function(\n                $rootScope,\n                $window\n            ) {\n                return new Clingy(\n                    $rootScope,\n                    $window,\n                    this\n                );\n            }\n        ];\n        this.listenForStateChange = false;\n        this.listenForWindowUnload = true;\n    }\n\n    setListenForStateChange(listenForStateChange) {\n        this.listenForStateChange = listenForStateChange;\n\n        return this;\n    }\n\n    setListenForWindowUnload(listenForWindowUnload) {\n        this.listenForWindowUnload = listenForWindowUnload;\n\n        return this;\n    }\n}\n\nangular.module('clingy', []).provider(\n    'clingy',\n    ClingyProvider\n);\n"],"sourceRoot":"/source/"}